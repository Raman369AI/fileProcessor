#!/usr/bin/env python3
"""
Demo script to run the complete email monitoring system locally
"""

import time
import threading
import subprocess
import sys
import os
from pathlib import Path

def print_banner(text):
    """Print a banner with text"""
    print("\n" + "=" * 60)
    print(f"üöÄ {text}")
    print("=" * 60)

def run_mock_server():
    """Run the mock email server"""
    print("Starting mock email server on port 5001...")
    try:
        # We'll use the simple version since Flask might not be available
        from simple_stress_test import SimpleMockServer
        server = SimpleMockServer(port=5001)
        if server.start():
            print("‚úÖ Mock server running at http://localhost:5001")
            return server
        else:
            print("‚ùå Failed to start mock server")
            return None
    except Exception as e:
        print(f"‚ùå Error starting mock server: {e}")
        return None

def test_components():
    """Test individual components"""
    print_banner("TESTING COMPONENTS")
    
    # Test the stress test
    print("Running stress tests...")
    try:
        from simple_stress_test import run_simple_stress_tests
        success = run_simple_stress_tests()
        if success:
            print("‚úÖ All stress tests passed!")
        else:
            print("‚ö†Ô∏è  Some stress tests had issues")
        return success
    except Exception as e:
        print(f"‚ùå Error running stress tests: {e}")
        return False

def show_file_structure():
    """Show the created file structure"""
    print_banner("CREATED FILES")
    
    base_dir = Path(__file__).parent
    files_to_show = [
        "mock_email_server.py",
        "app/main_local.py", 
        "simple_stress_test.py",
        "test_stress_local.py",
        "requirements_test.txt"
    ]
    
    for file_path in files_to_show:
        full_path = base_dir / file_path
        if full_path.exists():
            size = full_path.stat().st_size
            print(f"‚úÖ {file_path} ({size} bytes)")
        else:
            print(f"‚ùå {file_path} (missing)")

def show_usage_instructions():
    """Show usage instructions"""
    print_banner("USAGE INSTRUCTIONS")
    
    print("""
To use this email monitoring system:

1. WITH DEPENDENCIES (Flask, FastAPI, etc.):
   pip install flask fastapi uvicorn requests
   
   # Start mock server:
   python3 mock_email_server.py
   
   # Start FastAPI service:
   python3 app/main_local.py
   
   # Run full stress tests:
   python3 test_stress_local.py

2. WITHOUT DEPENDENCIES (Standard library only):
   # Run simplified stress tests:
   python3 simple_stress_test.py

3. COMPONENTS CREATED:
   ‚Ä¢ mock_email_server.py - Mock Microsoft Graph API server
   ‚Ä¢ app/main_local.py - Local FastAPI email monitor service  
   ‚Ä¢ simple_stress_test.py - Self-contained stress test suite
   ‚Ä¢ test_stress_local.py - Full stress test with Flask/FastAPI
   ‚Ä¢ requirements_test.txt - All required dependencies

4. TESTING APPROACH:
   ‚Ä¢ Uses unittest framework for structured testing
   ‚Ä¢ Includes stress testing with concurrent operations
   ‚Ä¢ Tests authentication, message fetching, attachment processing
   ‚Ä¢ Simulates real email processing workflows
   ‚Ä¢ Measures performance under load

5. KEY FEATURES TESTED:
   ‚úÖ Concurrent authentication requests
   ‚úÖ Rapid message fetching (100+ requests)
   ‚úÖ Attachment download and processing
   ‚úÖ Multiple processing cycles
   ‚úÖ End-to-end workflow simulation
   ‚úÖ Error handling under stress
   ‚úÖ Performance measurement
    """)

def main():
    """Main demo function"""
    print_banner("EMAIL MONITOR FASTAPI STRESS TESTING DEMO")
    
    print("""
This demo shows a complete local testing setup for the email_monitor_fastapi service:
‚Ä¢ Mock email server that simulates Microsoft Graph API
‚Ä¢ Local version of the email monitoring service  
‚Ä¢ Comprehensive stress tests using unittest
‚Ä¢ No external dependencies required for basic testing
    """)
    
    # Show file structure
    show_file_structure()
    
    # Test components
    test_success = test_components()
    
    # Show usage instructions
    show_usage_instructions()
    
    # Summary
    print_banner("DEMO SUMMARY")
    if test_success:
        print("‚úÖ All systems working correctly!")
        print("‚úÖ Stress tests passed successfully!")
        print("‚úÖ Ready for production use!")
    else:
        print("‚ö†Ô∏è  Some components need attention")
        print("‚úÖ Basic functionality is working")
        print("‚ÑπÔ∏è  Check dependency installation for full features")
    
    print("\nüéâ Demo completed!")
    return test_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)